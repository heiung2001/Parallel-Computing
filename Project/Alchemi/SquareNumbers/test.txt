using System;
using System.Collections.Generic;
using System.Text;
using Alchemi.Core.Owner;
using Alchemi.Core;

namespace SquareNumbers
{
    class Program : GApplication
    {
        static public GApplication App = new GApplication();
        static private DateTime startTime;

        [STAThread]
        static public void Main(string[] args)
        {
            int n, k;
            Console.WriteLine("[Integral Computation Grid Application]\n--------------------------------\n");
            Console.Write("Enter a integer: ");
            n = Int32.Parse(Console.ReadLine());
            Console.Write("Enter number of threads: ");
            k = Int32.Parse(Console.ReadLine());

            var cluster = n / k + 1;
            for (int i = 0; i < cluster; i++)
            {
                if (i == cluster - 1)
                {
                    App.Threads.Add(new SquareNumber(i * k + 1, n));
                }
                else
                {
                    App.Threads.Add(new SquareNumber(i * k + 1, i * k + k));
                }
            }

            GConnection gc = GConnection.FromConsole("localhost", "9000", "user", "user");
            App.Connection = gc;
            App.Manifest.Add(new ModuleDependency(typeof(SquareNumber).Module));
            App.ThreadFinish += App_ThreadFinish;
            App.ApplicationName = "Square Numbers - Alchemi";
            App.ApplicationFinish += new GApplicationFinish(App_ApplicationFinish);
            startTime = DateTime.Now;
            Console.WriteLine("Thread Started");
            App.Start();
            Console.ReadLine();
        }
        
        static private void App_ThreadFinish(GThread thread)
        {
            SquareNumber s = thread as SquareNumber;
            Console.WriteLine("Luong {0} ({1}:{2}): ", thread.Id, s.start, s.end);
            for (int i = 0; i < s.L.Count; i++)
            {
                Console.Write(s.L[i] + " ");
            }
            Console.WriteLine("\n");
        }

        static private void App_ApplicationFinish()
        {
            Console.WriteLine("Calculation finished after {0} second", DateTime.Now - startTime);
        }
    }

    [Serializable]
    class SquareNumber : GThread
    {
        public int start, end;
        public List<int> L = new List<int>();
        public SquareNumber(int start, int end)
        {
            this.start = start;
            this.end = end;
        }
        public override void Start()
        {
            for (int i = (int)Math.Ceiling(Math.Sqrt(start)); i <= (int)Math.Floor(Math.Sqrt(end)); i++)
            {
                L.Add(i * i);
            }
        }
    }
}
